#include <iostream>
#include <vector>
#include <limits.h>

using namespace std;

void bellmanFord(int V, vector<vector<pair<int, int>>> &graph, int start) {
    // Step 1: Initialize distances from start to all other vertices as INFINITE
    vector<int> dist(V, INT_MAX);
    dist[start] = 0;

    // Step 2: Relax all edges V-1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int u = 0; u < V; u++) {
            for (auto edge : graph[u]) {
                int v = edge.first;    // destination vertex
                int weight = edge.second; // weight of the edge
                if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                }
            }
        }
    }

    // Step 3: Check for negative-weight cycles
    for (int u = 0; u < V; u++) {
        for (auto edge : graph[u]) {
            int v = edge.first;
            int weight = edge.second;
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                cout << "Graph contains negative weight cycle" << endl;
                return; // If negative cycle is found, stop
            }
        }
    }

    // Step 4: Print the result
    cout << "Vertex Distance from Source " << start << endl;
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            cout << "Vertex " << i << ": INF" << endl;
        else
            cout << "Vertex " << i << ": " << dist[i] << endl;
    }
}

int main() {
    int V = 5; // Number of vertices in graph

    // Graph adjacency list representation where g[u] contains pairs {v, w}
    // representing an edge from u to v with weight w
    vector<vector<pair<int, int>>> graph(V);

    // Adding edges to the graph (u -> v with weight w)
    graph[0].push_back({1, -1});
    graph[0].push_back({2, 4});
    graph[1].push_back({2, 3});
    graph[1].push_back({3, 2});
    graph[1].push_back({4, 2});
    graph[3].push_back({2, 5});
    graph[3].push_back({1, 1});
    graph[4].push_back({3, -3});

    int start = 0; // Starting vertex
    bellmanFord(V, graph, start);

    return 0;
}

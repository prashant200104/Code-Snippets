#include <iostream>
#include <vector>
#include <limits.h>

using namespace std;

struct Edge {
    int source, destination, weight;
};

void bellmanFord(int V, int E, vector<Edge>& edges, int start) {
    // Step 1: Initialize distances from start to all other vertices as INFINITE
    vector<int> dist(V, INT_MAX);
    dist[start] = 0;

    // Step 2: Relax all edges V-1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].source;
            int v = edges[j].destination;
            int weight = edges[j].weight;
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Step 3: Check for negative-weight cycles
    for (int i = 0; i < E; i++) {
        int u = edges[i].source;
        int v = edges[i].destination;
        int weight = edges[i].weight;
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains negative weight cycle" << endl;
            return; // If negative cycle is found, stop
        }
    }

    // Step 4: Print the result
    cout << "Vertex Distance from Source " << start << endl;
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            cout << "Vertex " << i << ": INF" << endl;
        else
            cout << "Vertex " << i << ": " << dist[i] << endl;
    }
}

int main() {
    int V = 5; // Number of vertices in graph
    int E = 8; // Number of edges in graph
    vector<Edge> edges = {
        {0, 1, -1},
        {0, 2, 4},
        {1, 2, 3},
        {1, 3, 2},
        {1, 4, 2},
        {3, 2, 5},
        {3, 1, 1},
        {4, 3, -3}
    };

    int start = 0; // Starting vertex
    bellmanFord(V, E, edges, start);

    return 0;
}

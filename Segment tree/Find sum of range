#include<bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define mset(m,v) memset(m,v,sizeof(m))
#define dbg(var) cout<<#var<<"="<<var<<"\n";
#define nl cout<<"\n";
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef vector<int> vi;
#define f(x,a,b) for(int x=a;x<b;x++)
#define all(a) (a).begin(), (a).end()
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ff first
#define ss second
const int N=2e5+5;

int n,q;
int a[N];
int t[4*N];

void build(int index, int l, int r)
{
    if(l==r)// reached leaf node
    {
        t[index]=a[l];
        return ;
    }
    int mid = (l+r)/2;
    build(2*index, l,mid);
    build(index*2+1,mid+1,r);
    t[index] = t[index*2] + t[index*2+1];
}

void update(int index, int l, int r, int pos, int val)
{
    if(pos < l || pos > r) return;
    if(l==r)
    {
        t[index]=val;
        a[l]=val;
        return;
    }
    int mid = (l+r)/2;
    update(index*2,l,mid,pos,val);
    update(index*2+1,mid+1,r,pos,val);

    t[index] = t[index*2] + t[index*2+1];
}

int query(int index, int l, int r, int ql, int qr)
{
    if(ql>r || qr<l) return 0;
    if(l>=ql && r<=qr) return t[index];
    int mid = (l+r)/2;
    return query(index*2, l,mid, ql,qr) + query(index*2+1,mid+1, r, ql,qr);
}

void solve()
{
    cin>>n>>q;
    f(i,0,n) cin>>a[i];
    build(1,0,n-1);

    while(q--)
    {
        int command; cin>>command;
        if(command == 1) //update
        {
            int pos,val;
            cin>>pos>>val;
            pos--;
            update(1,0,n-1,pos,val);
        }
        else //query
        {
            int ql, qr;
            cin>>ql>>qr;
            ql--;
            qr--;
            cout<<query(1,0,n-1,ql,qr);nl;
        }
    }
}

signed main ()
{
 ios_base::sync_with_stdio(0);
 cin.tie(0);cout.tie(0);

//  int t; cin>>t; while(t--)
 solve();
}
